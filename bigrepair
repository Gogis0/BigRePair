#!/usr/bin/env python3

import sys, time, argparse, subprocess, os.path


Description = """
Prefix-free parsing + Repair compression

  Compression:
     {exe} file [options]
  creates compressed files file.C and file.R

  Decompression:
     {exe} file
  decompresses file.C and file.D to file.out          
"""

 
parse_exe = "ctph/newscan.x"
parseNT_exe = "ctph/newscanNT.x"
myrepair_exe = "myrepair/repair"
mydespair_exe = "myrepair/despair"
preprocess_exe = "procdic"
postprocess_exe = "postproc"


def main():
  show_command_line(sys.stderr)
  parser = argparse.ArgumentParser(description=Description.format(exe=sys.argv[0]), formatter_class=argparse.RawTextHelpFormatter)
  parser.add_argument('input', help='input file name', type=str)
  parser.add_argument('-w', '--wsize', help='sliding window size (def. 10)', default=10, type=int)
  parser.add_argument('-p', '--mod', help='hash modulus (def. 100)', default=100, type=int)
  parser.add_argument('-t', help='number of helper threads (def. None)', default=0, type=int)
  parser.add_argument('-d',  help='decompress',action='store_true')
  parser.add_argument('-c',  help='decompress and check',action='store_true')
  parser.add_argument('-v', help="verbose", action='store_true')
  args = parser.parse_args()

  logfile_name = args.input + ".log"
  # get main bigrepair directory 
  args.main_dir = os.path.split(sys.argv[0])[0]  
  print("Sending logging messages to file:", logfile_name)
  with open(logfile_name,"a") as logfile:
    start0 = start = time.time()
        
    if(args.d or args.c): # decompress and check
      command = "{exe} {file}".format(
                exe = os.path.join(args.main_dir,mydespair_exe), file=args.input)
      print("==== Decompressing C+R files. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("Elapsed time: {0:.4f}".format(time.time()-start));
      if args.c:      
        command = "cmp {file} {file}.out".format(file=args.input); 
        print("==== Comparing decompressed file. Command:", command);
        if(execute_command(command,logfile,logfile_name)):
          print("Decompressed file matches");
        else:
          print("Decompressed file differs");
      
      
    else:       # pfp + repair
      # ---------- parsing of the input file 
      if args.t>0:
        command = "{exe} {file} -w {wsize} -p {modulus} -t {th}".format(
                exe = os.path.join(args.main_dir,parse_exe),
                wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
      else:
        command = "{exe} {file} -w {wsize} -p {modulus}".format(
                exe = os.path.join(args.main_dir,parseNT_exe),
                wsize=args.wsize, modulus = args.mod, file=args.input)
      if args.v: command += " -v"
      command += " -c"
      print("==== Parsing. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("Elapsed time: {0:.4f}".format(time.time()-start))
      # delete temporary parsing files 
      command = "rm -f {file}.parse_old {file}.last {file}.occ".format(file=args.input)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      
      # ---- preprocess the dictionary 
      start = time.time()
      command = "{exe} {file}.dicz".format(
                exe = os.path.join(args.main_dir,preprocess_exe), file=args.input)
      print("==== Preprocessing the dictionary. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
  
      # ---- apply repair to the modified dictionary     
      command = "{exe} {file}.dicz.int".format(
                exe = os.path.join(args.main_dir,myrepair_exe), file=args.input)
      print("==== Repair dictionary. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
       return
      
      # ---- apply repair to the parse     
      command = "{exe} {file}.parse".format(
                exe = os.path.join(args.main_dir,myrepair_exe), file=args.input)
      print("==== Repair parse. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
       return
    
      # ---- postprocess
      command = "{exe} {file}".format(
                exe = os.path.join(args.main_dir,postprocess_exe), file=args.input)
      print("==== Postprocessing the dictionary. Command:", command)
      if(execute_command(command,logfile,logfile_name)!=True):
        return      
      print("Elapsed time: {0:.4f}".format(time.time()-start))
      
      # delete temporary parsing/dictionary files 
      command = "rm -f {file}.parse {file}.parse.C {file}.parse.R {file}.dicz {file}.dicz.int {file}.dicz.int.C {file}.dicz.int.R".format(file=args.input)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      # ---- repair done   

  print("==== Done")



def show_command_line(f):
  f.write("Command line: ") 
  for x in sys.argv:
     f.write(x+" ")
  f.write("\n")   

# compute hash digest for a file 
def file_digest(name,logfile):
    try:
      hash_command = "{exe} {infile}".format(exe=shasum_exe, infile=name)
      hashsum = subprocess.check_output(hash_command.split(),stderr=logfile)
      hashsum = hashsum.decode("utf-8").split()[0]
    except:
      hashsum = "Error!" 
    return hashsum  
      
# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,env=None):
  try:
    #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
    subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
  except subprocess.CalledProcessError:
    print("Error executing command line:")
    print("\t"+ command)
    print("Check log file: " + logfile_name)
    return False
  return True


if __name__ == '__main__':
  main()
